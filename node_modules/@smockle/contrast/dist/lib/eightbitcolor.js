import { EightBit } from "./eightbit.js";
import { HexColor } from "./hexcolor.js";
const inspect = Symbol.for("nodejs.util.inspect.custom");
export class EightBitColor {
    /** The current red value, e.g. EightBit(255). */
    R;
    /** The current green value, e.g. EightBit(255). */
    G;
    /** The current blue value, e.g. EightBit(255). */
    B;
    constructor(R, G, B) {
        this.R = new EightBit(R);
        this.G = new EightBit(G);
        this.B = new EightBit(B);
    }
    /** Returns the current red, green and blue values, e.g. { R: 255, G: 255, B: 255 }. */
    valueOf() {
        const R = this.R.valueOf();
        const G = this.G.valueOf();
        const B = this.B.valueOf();
        return { R, G, B };
    }
    /** Returns a formatted representation of the current rgb value, e.g. "rgb(255, 255, 255)". */
    [inspect]() {
        const R = this.R.valueOf();
        const G = this.G.valueOf();
        const B = this.B.valueOf();
        return `rgb(${R}, ${G}, ${B})`;
    }
    /** Returns the luminosity. */
    luminosity() {
        const R_COEFFICIENT = 0.2126;
        const G_COEFFICIENT = 0.7152;
        const B_COEFFICIENT = 0.0722;
        const R = this.R.linearize();
        const G = this.G.linearize();
        const B = this.B.linearize();
        return R_COEFFICIENT * R + G_COEFFICIENT * G + B_COEFFICIENT * B;
    }
    /** Returns a HexColor with the current value, e.g. Hex("#FFFFFF"). */
    toHexColor() {
        const R = this.R.toHex().valueOf();
        const G = this.G.toHex().valueOf();
        const B = this.B.toHex().valueOf();
        return new HexColor(`#${R}${G}${B}`);
    }
}
