import { Hex } from "./hex.js";
const inspect = Symbol.for("nodejs.util.inspect.custom");
export class EightBit {
    /** A number between 0 and 255. */
    value;
    constructor(value) {
        this.value = Number(value);
    }
    /** Returns the current value, e.g. 255. */
    valueOf() {
        return this.value;
    }
    /** Returns a formatted representation of the current value, e.g. "EightBit(255)". */
    [inspect]() {
        return `EightBit(${this.value})`;
    }
    /** Convert from sRGB to linear RGB. */
    linearize() {
        /** The upper limit of the original range. */
        const SCALE = 255;
        /** The current value mapped to a 0 to 1 range, so 255 becomes 1. */
        const value = this.value / SCALE;
        return value <= 0.03928
            ? value / 12.92
            : Math.pow((value + 0.055) / 1.055, 2.4);
    }
    /** Returns a Hex with the current value, e.g. Hex("#FF"). */
    toHex() {
        const value = this.value.toString(16).toUpperCase();
        return new Hex(`#${value}`);
    }
}
